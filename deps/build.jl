using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Example taken from
# https://github.com/JuliaIO/ImageMagick.jl/blob/master/deps/build.jl
dependencies = [
    "build_Zlib.v1.2.11.jl",
    "build_GEOS.v3.7.2.jl",
    "build_SQLite.v3.28.0.jl",
    "build_PROJ.v6.1.0.jl",
    "build_LibCURL.v7.64.1.jl"
]

for elem in dependencies
    # it's a bit faster to run the build in an anonymous module instead of
    # starting a new julia process
    m = Module(:__anon__)
    Core.include(m, (joinpath(@__DIR__, elem)))
end

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libgdal"], :libgdal),
    ExecutableProduct(prefix, "gdal_contour", :gdal_contour_path),
    ExecutableProduct(prefix, "gdal_grid", :gdal_grid_path),
    ExecutableProduct(prefix, "gdal_rasterize", :gdal_rasterize_path),
    ExecutableProduct(prefix, "gdal_translate", :gdal_translate_path),
    ExecutableProduct(prefix, "gdaladdo", :gdaladdo_path),
    ExecutableProduct(prefix, "gdalbuildvrt", :gdalbuildvrt_path),
    ExecutableProduct(prefix, "gdaldem", :gdaldem_path),
    ExecutableProduct(prefix, "gdalinfo", :gdalinfo_path),
    ExecutableProduct(prefix, "gdallocationinfo", :gdallocationinfo_path),
    ExecutableProduct(prefix, "gdalmanage", :gdalmanage_path),
    ExecutableProduct(prefix, "gdalsrsinfo", :gdalsrsinfo_path),
    ExecutableProduct(prefix, "gdaltindex", :gdaltindex_path),
    ExecutableProduct(prefix, "gdaltransform", :gdaltransform_path),
    ExecutableProduct(prefix, "gdalwarp", :gdalwarp_path),
    ExecutableProduct(prefix, "nearblack", :nearblack_path),
    ExecutableProduct(prefix, "ogr2ogr", :ogr2ogr_path),
    ExecutableProduct(prefix, "ogrinfo", :ogrinfo_path),
    ExecutableProduct(prefix, "ogrlineref", :ogrlineref_path),
    ExecutableProduct(prefix, "ogrtindex", :ogrtindex_path),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeo/GDALBuilder/releases/download/v3.0.0-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/GDAL.v3.0.0.aarch64-linux-gnu.tar.gz", "8f44cc6cbcc3436253301a75249d12e8b9e45f0492959bedda4909fa65293938"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/GDAL.v3.0.0.aarch64-linux-musl.tar.gz", "4beb9f52e13f03875c4f578fe5fd164ed94c4a05b53684aed7cec2865f6a0f6d"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/GDAL.v3.0.0.arm-linux-gnueabihf.tar.gz", "12c735b021403f1f6fc7200227eb2f4d4c0132f3e945e34971c1ec6cf39d4123"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/GDAL.v3.0.0.arm-linux-musleabihf.tar.gz", "e414acd8d48e384de7a790647b2cde779b19f98a41e72c9c6482a8af9dcfa002"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/GDAL.v3.0.0.i686-linux-gnu.tar.gz", "bee7129a0006c19651e81ee5792ef7264be21c5ffe2540091da56380e45560dd"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/GDAL.v3.0.0.i686-linux-musl.tar.gz", "d8d04ff16c80c00e3bd9e8d3062e2d64632505a4aa27ee51c65992c7ff978756"),
    Windows(:i686) => ("$bin_prefix/GDAL.v3.0.0.i686-w64-mingw32.tar.gz", "cba59375adef400bf8e8e3e8e642ec545e8e4853f7b08692b3504ae996519e37"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/GDAL.v3.0.0.powerpc64le-linux-gnu.tar.gz", "c5dca444ba56e6af675fac2b05b1c3e4a722f39247a78260ede251fa921f6200"),
    MacOS(:x86_64) => ("$bin_prefix/GDAL.v3.0.0.x86_64-apple-darwin14.tar.gz", "d957a4a9ff09d478deef496acbac6b73269ba2ab4b05565be8678687a2c5d13b"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/GDAL.v3.0.0.x86_64-linux-gnu.tar.gz", "300e84a5f569c61940f3087c46a82b1a0647c94910d9ab9f8b7dcc5a2a843151"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/GDAL.v3.0.0.x86_64-linux-musl.tar.gz", "9f342e891daa46567a6703a27daca3997a992220b97e37a2d57e1be46ea14930"),
    FreeBSD(:x86_64) => ("$bin_prefix/GDAL.v3.0.0.x86_64-unknown-freebsd11.1.tar.gz", "2417c7bfd6263455f7c9d176d1c229109dad0143d81bb34fd644f7a35bc2507e"),
    Windows(:x86_64) => ("$bin_prefix/GDAL.v3.0.0.x86_64-w64-mingw32.tar.gz", "4b78eccf42e19f52285f5fb061b5faa91c12d8b8d309a6c460afd417deba532a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
